// The ESLint browser environment defines all browser globals as valid,
// Even though most people don't know some of them exist (e.g. `name` or `status`).
// This is dangerous as it hides accidentally undefined variables.
// We blacklist the globals that we deem potentially confusing.
// To use them, explicitly reference them, e.g. `window.name` or `window.status`.
import restrictedGlobals from 'confusing-browser-globals'
import type { Linter } from 'eslint'
import globals from 'globals'

export function base(): Linter.FlatConfig[] {
  return [
    {
      languageOptions: {
        globals: {
          ...globals.browser,
          ...globals.es2021,
        },
      },
      linterOptions: {
        // Indicate if unused disable and enable directives should be reported
        // as "warn".
        reportUnusedDisableDirectives: true,
      },
      rules: {
        /**
         * Built-in rules
         */

        // Off for Prettier
        // https://github.com/prettier/eslint-config-prettier/blob/main/index.js
        // TODO move to prettier config
        'array-bracket-newline': 'off',
        'array-bracket-spacing': 'off',
        'array-element-newline': 'off',
        'arrow-parens': 'off',
        'arrow-spacing': 'off',
        'block-spacing': 'off',
        'brace-style': 'off',
        'comma-dangle': 'off',
        'comma-spacing': 'off',
        'comma-style': 'off',
        'computed-property-spacing': 'off',
        'curly': 0,
        'dot-location': 'off',
        'eol-last': 'off',
        'func-call-spacing': 'off',
        'function-call-argument-newline': 'off',
        'function-paren-newline': 'off',
        'generator-star': 'off',
        'generator-star-spacing': 'off',
        'implicit-arrow-linebreak': 'off',
        'indent': 'off',
        'jsx-quotes': 'off',
        'key-spacing': 'off',
        'keyword-spacing': 'off',
        'linebreak-style': 'off',
        'lines-around-comment': 0,
        'max-len': 0,
        'multiline-ternary': 'off',
        'new-parens': 'off',
        'newline-per-chained-call': 'off',
        'no-arrow-condition': 'off',
        'no-comma-dangle': 'off',
        'no-confusing-arrow': 0,
        'no-extra-parens': 'off',
        'no-extra-semi': 'off',
        'no-floating-decimal': 'off',
        'no-mixed-operators': 0,
        'no-mixed-spaces-and-tabs': 'off',
        'no-multi-spaces': 'off',
        'no-multiple-empty-lines': 'off',
        'no-reserved-keys': 'off',
        'no-space-before-semi': 'off',
        'no-tabs': 0,
        'no-trailing-spaces': 'off',
        'no-unexpected-multiline': 0,
        'no-whitespace-before-property': 'off',
        'no-wrap-func': 'off',
        'nonblock-statement-body-position': 'off',
        'object-curly-newline': 'off',
        'object-curly-spacing': 'off',
        'object-property-newline': 'off',
        'one-var-declaration-per-line': 'off',
        'operator-linebreak': 'off',
        'padded-blocks': 'off',
        'quote-props': 'off',
        'quotes': 0,
        'rest-spread-spacing': 'off',
        'semi': 'off',
        'semi-spacing': 'off',
        'semi-style': 'off',
        'space-after-function-name': 'off',
        'space-after-keywords': 'off',
        'space-before-blocks': 'off',
        'space-before-function-paren': 'off',
        'space-before-function-parentheses': 'off',
        'space-before-keywords': 'off',
        'space-in-brackets': 'off',
        'space-in-parens': 'off',
        'space-infix-ops': 'off',
        'space-return-throw-case': 'off',
        'space-unary-ops': 'off',
        'space-unary-word-ops': 'off',
        'switch-colon-spacing': 'off',
        'template-curly-spacing': 'off',
        'template-tag-spacing': 'off',
        'unicode-bom': 'off',
        'wrap-iife': 'off',
        'wrap-regex': 'off',
        'yield-star-spacing': 'off',

        'accessor-pairs': 'error',
        'array-callback-return': [
          'error',
          // To be compatible with unicorn/no-useless-undefined
          { allowImplicit: true },
        ],
        // Can cause issues when Prettier is enabled
        // TODO should this move to prettier config?
        'arrow-body-style': 'off',
        'block-scoped-var': 'error',
        'camelcase': 'error',
        'capitalized-comments': 'off',
        'class-methods-use-this': 'off',
        'complexity': 'off',
        // When on, this rule gets annoying when combined with Unicorn's
        // no-useless-* rules.
        'consistent-return': 'off',
        // Not sure if required
        'consistent-this': 'error',
        'constructor-super': 'error',
        'default-case': 'error',
        'default-case-last': 'error',
        'default-param-last': 'error',
        'dot-notation': 'warn',
        'eqeqeq': 'warn',
        'for-direction': 'error',
        'func-name-matching': 'error',
        'func-names': ['error', 'as-needed'],
        'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
        'getter-return': 'error',
        'grouped-accessor-pairs': 'error',
        'guard-for-in': 'error',
        // Maybe turn this on when it's obvious which identifiers do not make sense.
        // Rules like unicorn/catch-error-name look after some of these, anyway.
        'id-denylist': 'off',
        'id-length': 'off',
        // Mainly covered by rules like "camelcase". This could probably cause more
        // trouble than it's worth.
        'id-match': 'off',
        'init-declarations': 'off',
        'line-comment-position': 'error',
        'lines-between-class-members': 'off',
        'logical-assignment-operators': ['warn', 'always'],
        'max-classes-per-file': 'off',
        'max-depth': 'off',
        'max-lines': 'off',
        'max-lines-per-function': 'off',
        'max-nested-callbacks': 'error',
        'max-params': 'off',
        'max-statements': 'off',
        'max-statements-per-line': 'off',
        'multiline-comment-style': 'off',
        'new-cap': 'error',
        'no-alert': 'error',
        'no-array-constructor': 'error',
        'no-async-promise-executor': 'error',
        'no-await-in-loop': 'error',
        'no-bitwise': 'error',
        'no-buffer-constructor': 'error',
        'no-caller': 'error',
        'no-case-declarations': 'error',
        'no-class-assign': 'error',
        'no-compare-neg-zero': 'error',
        'no-cond-assign': 'error',
        'no-console': 'warn',
        'no-const-assign': 'error',
        'no-constant-binary-expression': 'error',
        'no-constant-condition': 'error',
        'no-constructor-return': 'error',
        'no-continue': 'error',
        'no-control-regex': 'error',
        'no-debugger': 'error',
        'no-delete-var': 'error',
        'no-div-regex': 'warn',
        'no-dupe-args': 'error',
        'no-dupe-class-members': 'error',
        'no-dupe-else-if': 'error',
        'no-dupe-keys': 'error',
        'no-duplicate-case': 'error',
        'no-duplicate-imports': 'error',
        'no-else-return': 'warn',
        'no-empty': 'error',
        'no-empty-character-class': 'error',
        'no-empty-function': 'error',
        'no-empty-pattern': 'error',
        'no-empty-static-block': 'error',
        'no-eq-null': 'error',
        'no-eval': 'error',
        'no-ex-assign': 'error',
        'no-extend-native': 'error',
        'no-extra-bind': 'warn',
        'no-extra-boolean-cast': 'warn',
        'no-extra-label': 'warn',
        'no-fallthrough': ['error', { allowEmptyCase: true }],
        'no-func-assign': 'error',
        'no-global-assign': 'error',
        'no-implicit-coercion': 'warn',
        'no-implicit-globals': 'error',
        'no-implied-eval': 'error',
        'no-import-assign': 'error',
        'no-inline-comments': 'error',
        'no-inner-declarations': 'error',
        'no-invalid-regexp': 'error',
        'no-invalid-this': 'error',
        'no-irregular-whitespace': 'error',
        'no-iterator': 'error',
        'no-label-var': 'error',
        'no-labels': 'error',
        'no-lone-blocks': 'error',
        'no-lonely-if': 'warn',
        'no-loop-func': 'error',
        'no-loss-of-precision': 'error',
        'no-magic-numbers': 'off',
        'no-misleading-character-class': 'error',
        'no-multi-assign': 'error',
        'no-multi-str': 'error',
        // This is handled by unicorn.
        'no-negated-condition': 'off',
        'no-nested-ternary': 'off',
        'no-new': 'error',
        'no-new-func': 'error',
        'no-new-native-nonconstructor': 'error',
        'no-new-object': 'error',
        'no-new-symbol': 'error',
        'no-new-wrappers': 'error',
        'no-nonoctal-decimal-escape': 'error',
        'no-obj-calls': 'error',
        'no-object-constructor': 'error',
        'no-octal': 'error',
        'no-octal-escape': 'error',
        'no-param-reassign': 'error',
        'no-plusplus': 'error',
        'no-promise-executor-return': 'error',
        'no-proto': 'error',
        'no-prototype-builtins': 'error',
        'no-redeclare': 'error',
        'no-regex-spaces': 'warn',
        'no-restricted-exports': 'off',
        'no-restricted-globals': ['error', ...restrictedGlobals],
        'no-restricted-imports': 'off',
        'no-restricted-properties': 'off',
        'no-restricted-syntax': 'off',
        'no-return-assign': 'error',
        'no-return-await': 'error',
        'no-script-url': 'error',
        'no-self-assign': 'error',
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-setter-return': 'error',
        'no-shadow': 'error',
        'no-shadow-restricted-names': 'error',
        'no-sparse-arrays': 'error',
        'no-template-curly-in-string': 'error',
        'no-ternary': 'off',
        'no-this-before-super': 'error',
        'no-throw-literal': 'error',
        'no-undef': 'error',
        'no-undef-init': 'warn',
        'no-undefined': 'off',
        'no-underscore-dangle': 'off',
        'no-unmodified-loop-condition': 'error',
        'no-unneeded-ternary': 'warn',
        'no-unreachable': 'error',
        'no-unreachable-loop': 'error',
        'no-unsafe-finally': 'error',
        'no-unsafe-negation': 'error',
        'no-unsafe-optional-chaining': 'error',
        'no-unused-expressions': 'error',
        'no-unused-labels': 'warn',
        'no-unused-private-class-members': 'error',
        'no-unused-vars': [
          'error',
          {
            // Useful for extracting args from props and ignoring them:
            // { style: _style, ...restProps }
            argsIgnorePattern: '^_',
            varsIgnorePattern: '[iI]gnored',
          },
        ],
        'no-use-before-define': 'error',
        // TODO Do I need this? https://eslint.org/docs/rules/no-useless-backreference
        'no-useless-backreference': 'off',
        'no-useless-call': 'error',
        'no-useless-catch': 'error',
        'no-useless-computed-key': 'error',
        'no-useless-concat': 'error',
        'no-useless-constructor': 'error',
        'no-useless-escape': 'error',
        'no-useless-rename': 'warn',
        'no-useless-return': 'warn',
        'no-var': 'warn',
        'no-void': 'error',
        'no-warning-comments': 'off',
        'no-with': 'error',
        'object-shorthand': ['warn', 'always', { ignoreConstructors: true }],
        'one-var': ['warn', 'never'],
        'operator-assignment': ['warn', 'never'],
        'padding-line-between-statements': 'off',
        // Can cause issues when Prettier is enabled
        'prefer-arrow-callback': 'off',
        'prefer-const': 'warn',
        // Make compatible with Unicorn's no-unreadable-array-destructuring
        'prefer-destructuring': ['warn', { array: false, object: true }],
        'prefer-exponentiation-operator': 'warn',
        'prefer-named-capture-group': 'off',
        'prefer-numeric-literals': 'warn',
        // TODO Not supported by Typescript yet?
        'prefer-object-has-own': 'off',
        'prefer-object-spread': 'warn',
        'prefer-promise-reject-errors': 'error',
        'prefer-regex-literals': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'warn',
        'radix': 'error',
        'require-atomic-updates': 'error',
        'require-await': 'error',
        'require-unicode-regexp': 'error',
        'require-yield': 'error',
        // Sorting imports is handled by simple-import-sort
        'sort-imports': 'off',
        'sort-keys': [
          'error',
          'asc',
          {
            allowLineSeparatedGroups: true,
            caseSensitive: false,
            natural: true,
          },
        ],
        // Not required as one-var rule is set to 'error' and so there will
        // never be vars to sort.
        'sort-vars': 'off',
        'spaced-comment': 'off',
        // Generally gets in the way as it's difficult to know when this may be
        // required.
        'strict': 'off',
        'symbol-description': 'error',
        'use-isnan': 'error',
        'valid-typeof': ['error', { requireStringLiterals: true }],
        'vars-on-top': 'error',
        'yoda': 'warn',
      },
    },
  ]
}
